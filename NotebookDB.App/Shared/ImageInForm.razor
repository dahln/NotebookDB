@inject IToastService _toastService

<div class="text-center">
    <div class="row">
        <div class="col-lg-12">
            @if (string.IsNullOrEmpty(ImageBase64))
            {
                <i class="fa-regular fa-image fa-7x mt-lg-5 mb-2"></i>
            }
            else
            {
                <img src="@ImageBase64" class="w-100 mb-2" />
            }
        </div>
    </div>
    @if(Editing)
    {
        <div class="row">
            <div class="col-lg-12">
                <label class="btn btn-outline-primary w-100">
                    <InputFile OnChange="OnInputFileChange" style="display:none;" accept="image/*" />Upload File (32mb size limit)
                </label>
            </div>
        </div>
        @if (!string.IsNullOrEmpty(ImageBase64))
        {
            <div class="row mt-1">
                <div class="col-lg-12">
                    <input type="button" value="Remove Image" class="btn btn-outline-danger w-100" @onclick="RemoveFile" />
                </div>
            </div>
        }
    }
</div>




@code {

    [Parameter]
    public string? ImageBase64 { get; set; }


    [Parameter]
    public EventCallback<string> ImageBase64Changed { get; set; }

    [Parameter]
    public bool Editing { get; set; }

    //Reading image bytes in browser may not be optimal in all situations. Adjust as needed.
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var format = e.File.ContentType;
        long maxAllowedSize = 33_554_432;

        if (e.File.Size > maxAllowedSize)
        {
            _toastService.ShowError("Selected file is to big. Please choose file less than 32mb");
            return;
        }

        //If gif images will be uploaded, do not do this call - it will remove the animation
        var resizedImageFile = await e.File.RequestImageFileAsync(format, 500, 500);

        var buffer = new byte[resizedImageFile.Size];
        await resizedImageFile.OpenReadStream(maxAllowedSize).ReadAsync(buffer);
        var imageDataUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";

        ImageBase64 = imageDataUrl;

        await ImageBase64Changed.InvokeAsync(ImageBase64);
    }

    private async Task RemoveFile()
    {
        ImageBase64 = null;
        await ImageBase64Changed.InvokeAsync(ImageBase64);
    }

}
