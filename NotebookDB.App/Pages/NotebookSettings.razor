@attribute [Authorize]
@page "/notebook/{TypeId}/settings"

@using Microsoft.AspNetCore.Authorization

@inject NotebookDB.App.Services.API API
@inject NavigationManager _navigationManager
@inject IToastService _toastService 
@inject IModalService _modalService
@inject IJSRuntime JSRuntime


<div class="row">
    <div class="col-lg-12">
        <h4>
            Notebook Settings
            <a class="btn btn-primary ms-2" href="/notebook/@(TypeId)/design"><i class="fas fa-cog me-2"></i>Designer</a>
        </h4>
    </div>
</div>


<div class="row mt-5">
    <div class="col-lg-12">
        <h4>Name</h4>
    </div>
</div>

<div class="row">
    <div class="col-lg-4">
        <input type="text" class="form-control" @bind="Notebook.Name" placeholder="Form Name" aria-label="Form Name" aria-describedby="button-addon2">
    </div>
</div>


<div class="row mt-2">
    <div class="col-lg-12">
        <input type="checkbox" @bind="Notebook.AllowAttachments" /> Allow Files
    </div>
</div>

<div class="row mt-2">
    <div class="col-lg-12">
        <button class="btn btn-outline-dark" type="button" id="button-addon2" @onclick="UpdateNotebook">Save Changes</button>
    </div>
</div>

<div class="row mt-5">
    <div class="col-lg-12">
        <h4 class="mb-2">Manage Authorized Users/Administrators for this Notebook</h4>
        <p>
            Add or remove users who should have access to this notebook. Add the email address of the user.
        </p>
    </div>
</div>
<div class="row">
    <div class="col-lg-4">
        <div class="input-group mb-3">
            <input type="text" class="form-control" @bind="NewAuthorizedUser.Email" placeholder="User's Email Address" aria-label="User's Email Address" aria-describedby="button-addon2" />
            <div class="input-group-append">
                <button class="btn btn-success" type="button" id="button-addon2" @onclick="AddAuthorizedUser">Add User</button>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-12">
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th scope="col">Email Address</th>
                        <th scope="col"></th>
                        <th scope="col"></th>
                        <th scope="col"></th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in Notebook.AuthorizedUsers)
                    {
                        <tr>
                            <th scope="row">@user.Email</th>
                            <td>
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="@($"authorized_edit_{@user.Email}")" checked="@(user.AllowInstanceEdits ? "checked" : null )" @onchange="(() => ToggleCanEdit(user))" disabled="@(user.IsCurrentUser || user.IsNotebookOwner)" />
                                    <label class="form-check-label" for="@($"authorized_{@user.Email}")">Can Edit</label>
                                </div>
                            </td>
                            <td>
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="@($"authorized_admin_{@user.Email}")" checked="@(user.IsNotebookAdmin ? "checked" : null )" @onchange="(() => ToggleAuthorizedRole(user))" disabled="@(user.IsCurrentUser || user.IsNotebookOwner)" />
                                    <label class="form-check-label" for="@($"authorized_{@user.Email}")">Administrator</label>
                                </div>
                            </td>
                            <td>
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="@($"authorized_owner_{@user.Email}")" checked="@(user.IsNotebookOwner ? "checked" : null )" @onchange="(() => ToggleOwnerRole(user))" disabled="@(user.IsCurrentUser || Notebook.IsCurrentUserOwner == false)" />
                                    <label class="form-check-label" for="@($"authorized_{@user.Email}")">Owner</label>
                                </div>
                            </td>
                            <td>
                                <button class="btn btn-danger btn-sm" @onclick="(() => RemoveAuthorizedUser(user))"><i class="fas fa-trash-alt"></i></button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>


<div class="row mt-5">
    <div class="col-lg-12">
        <h4>Import/Export Data</h4>
    </div>
</div>
<div class="row mt-2">
    <div class="col-lg-12">
        <label class="btn btn-info">
            <InputFile OnChange="ImportData" style="display:none;" placeholder="Import" /> 
            <i class="fa-solid fa-file-import"></i>
            Import Data
        </label>
        <button @onclick="ExportData" class="btn btn-info">
            <i class="fa-solid fa-file-export"></i>
            Export Data
        </button>
        <p class="mt-3">Import a .CSV file. The CSV must be pipe delimited, with column headers that match the field name.</p>
        <p>Recommendation: Import into an empty notebook so if the import only partially works then you can easily delete all the data try again.</p>
    </div>
</div>
<div class="row mt-2">
    <div class="col-lg-12">
        <button @onclick="ExportSchema" class="btn btn-info">
            <i class="fa-solid fa-file-export"></i>
            Export Data Schema
        </button>
        <p class="mt-3">Save the Notebook fields. This can be used to recreate a Notebook.</p>
    </div>
</div>

@if(Notebook.IsCurrentUserOwner)
{
    <div class="row mt-5">
        <div class="col-lg-12">
            <h4>Delete</h4>
        </div>
    </div>
    <div class="row mt-2">
        <div class="col-lg-12">
            <input type="button" class="btn btn-warning" value="Delete DATA Only" @onclick="DeleteNotebookData" />
            <input type="button" class="btn btn-danger" value="Delete Notebook & All Data" @onclick="DeleteNotebook" />
        </div>
    </div>
}

<AuthorizeView Roles="Administrator">
    <Authorizing>
        @* Authorizing... *@
    </Authorizing>
    <NotAuthorized>
        @* You are not an admin. // Always here *@
    </NotAuthorized>
    <Authorized>
        <div class="row mt-5">
            <div class="col-lg-12">
                <h4>Create Template</h4>
            </div>
        </div>
        <div class="row mt-2">
            <div class="col-lg-12">
                <div class="input-group flex-nowrap">
                    <span class="input-group-text" id="addon-wrapping">Template Name</span>
                    <input type="text" class="form-control" @bind="Notebook.Name" disabled>
                    <span class="input-group-text" id="addon-wrapping">Icon</span>
                    <input type="text" class="form-control" @bind="NewTemplate.Icon">
                    <span class="input-group-text" id="addon-wrapping">Preview</span>
                    <span class="input-group-text" id="addon-wrapping"><i class="@NewTemplate.Icon"></i></span>
                    <button class="btn btn-outline-dark" type="button" id="button-addon2" @onclick="CreateTemplate">Create Template</button>
                </div>
            </div>
        </div>
    </Authorized>
</AuthorizeView>



@code {

    [Parameter]
    public string TypeId { get; set; }

    public Common.Notebook Notebook { get; set; } = new Common.Notebook();

    public Common.NotebookAuthorizedUser NewAuthorizedUser { get; set; } = new Common.NotebookAuthorizedUser();
    public Common.TemplateCreate NewTemplate { get; set; } = new Common.TemplateCreate();

    async protected override Task OnParametersSetAsync()
    {
        Notebook = await API.GetAsync<Common.Notebook>($"api/v1/notebook/{TypeId}");
        NewTemplate.Id = TypeId;
    }

    public async Task AddAuthorizedUser()
    {
        NewAuthorizedUser.NotebookId = TypeId;
        NewAuthorizedUser.UserId = string.Empty;

        await API.PostAsync($"api/v1/notebook/{TypeId}/authorized", NewAuthorizedUser);
        Notebook = await API.GetAsync<Common.Notebook>($"api/v1/notebook/{TypeId}");
    }

    public async Task RemoveAuthorizedUser(Common.NotebookAuthorizedUser user)
    {
        var modal = _modalService.Show<ConfirmDialog>("Are you sure you want to delete this?");
        var modalResult = await modal.Result;

        if (modalResult.Cancelled) { }
        else
        {
            await API.DeleteAsync($"api/v1/notebook/{TypeId}/authorized/{user.UserId}");
            Notebook = await API.GetAsync<Common.Notebook>($"api/v1/notebook/{TypeId}");
        }
    }

    public async Task ToggleCanEdit(Common.NotebookAuthorizedUser user)
    {
        await API.GetAsync($"api/v1/notebook/{TypeId}/authorized/{user.UserId}/toggle/edits");
        user.AllowInstanceEdits = user.AllowInstanceEdits ? false : true;

        if (user.AllowInstanceEdits == false)
        {
            user.IsNotebookAdmin = false;
            user.IsNotebookOwner = false;
        }
    }

    public async Task ToggleAuthorizedRole(Common.NotebookAuthorizedUser user)
    {
        await API.GetAsync($"api/v1/notebook/{TypeId}/authorized/{user.UserId}/toggle/admin");
        user.IsNotebookAdmin = user.IsNotebookAdmin ? false : true;

        if (user.IsNotebookAdmin == true)
            user.AllowInstanceEdits = true;
        else
            user.IsNotebookOwner = false;
    }

    public async Task ToggleOwnerRole(Common.NotebookAuthorizedUser user)
    {
        var modal = _modalService.Show<ConfirmDialog>("You are about to transfer OWNERSHIP of this Notebook to another user. This will remove your owner role. A notebook can have only one owner. Continue?");
        var modelResult = await modal.Result;

        if (modelResult.Cancelled){}
        else
        {
            await API.GetAsync($"api/v1/notebook/{TypeId}/authorized/{user.UserId}/toggle/owner");
        }
        _navigationManager.Refresh();
    }


    async private Task UpdateNotebook()
    {
        await API.PutAsync($"api/v1/notebook/{TypeId}", Notebook);
        _navigationManager.Refresh(true);
    }

    async private Task DeleteNotebook()
    {
        var modal = _modalService.Show<ConfirmDialog>("You are about to delete this NOTEBOOK and ALL DATA. Continue?");
        var modelResult = await modal.Result;

        if (modelResult.Cancelled) { }
        else
        {
            await API.DeleteAsync($"api/v1/notebook/{TypeId}");
            _navigationManager.NavigateTo($"/", true);
        }
    }

    async private Task DeleteNotebookData()
    {
        var modal = _modalService.Show<ConfirmDialog>("You are about to delete ALL DATA for this notebook. Continue?");
        var modelResult = await modal.Result;

        if (modelResult.Cancelled) { }
        else
        {
            await API.DeleteAsync($"api/v1/notebook/{TypeId}/data");
            _toastService.ShowSuccess("Data Deleted");
        }
    }

    private void ExportData()
    {
        _navigationManager.NavigateTo($"api/v1/notebook/{TypeId}/export", true);
        _toastService.ShowSuccess("File Downloaded");
    }

    private void ExportSchema()
    {
        _navigationManager.NavigateTo($"api/v1/notebook/{TypeId}/schema/export", true);
        _toastService.ShowSuccess("File Downloaded");
    }

    async private Task ImportData(InputFileChangeEventArgs e)
    {
        var format = e.File.ContentType;
        long maxAllowedSize = 33_554_432;

        if (e.File.Size > maxAllowedSize)
        {
            _toastService.ShowError("Selected file is to big. Please choose file less than 32mb");
            return;
        }

        var buffer = new byte[e.File.Size];
        await e.File.OpenReadStream(maxAllowedSize).ReadAsync(buffer);

        NotebookDB.Common.Download file = new NotebookDB.Common.Download()
        {
            Data = buffer,
            Name = e.File.Name,
            MimeType = format
        };

        await API.PostAsync($"api/v1/notebook/{TypeId}/import", file);
    }

    async private Task CreateTemplate()
    {
        await API.PostAsync($"api/v1/notebook/{TypeId}/template", NewTemplate);
        _toastService.ShowSuccess("Template Created");
    }
}

